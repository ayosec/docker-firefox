#!/usr/bin/env ruby

require "optparse"
require "socket"

def host_addr
  Socket.getifaddrs.
         find {|f| f.name == "docker0" and f.addr.ip? and f.addr.ipv6? == false }.
         addr.ip_address
end

def rand_char
  chars = ('A'..'Z').to_a
  chars[rand(chars.size)]
end

share_x11 = false
share_audio = false
share_downloads = true
shared_downloads_path = "/tmp/firefox-downloads"
profile_name = nil
volumes = []
image_name = "firefox"

OptionParser.new do |opts|
  opts.on "-a", "--[no-]share-audio", "Share PulseAudio server" do |v|
    share_audio = v
  end

  opts.on "-x", "--[no-]share-x11", "Share X11 instance" do |v|
    share_x11 = v
  end

  opts.on "-v", "--volume [VOLUME]", "Add more volumes to the container" do |v|
    volumes << v
  end

  opts.on "-d", "--disable-share-downloads", "Disable shared downloads path" do |v|
    share_downloads = !v
  end

  opts.on "-i", "--image [IMAGE]", "Docker image" do |v|
    image_name = v
  end

  opts.on "-pPROFILE", "--profile=PATH", "Profile path" do |v|
    if v !~ /\A(\w|-)+\Z/
      STDERR.puts "Invalid profile name: #{v}"
      exit 1
    end
    profile_name = v
  end

  opts.on "-DPATH", "--downloads=PATH", "Path shared by downloads" do |v|
    shared_downloads_path = v
  end
end.parse!

container_name = "firefox-" + rand_char + "-" + Time.now.strftime("%Y%m%d%H%M%S")

puts "Container Name: \033[1m#{container_name}\033[m"

cmd = [ "docker", "run", "--name", container_name ]

if share_x11
  cmd.concat %w(--rm -v /tmp/.X11-unix/:/tmp/.X11-unix -e)
  cmd << "DISPLAY=#{ENV["DISPLAY"]}"
else
  cmd << "-d"
end

if share_audio
  cmd << "-e" << "PULSE_SERVER=tcp:#{host_addr}"
end

if share_downloads
  if not File.directory?(shared_downloads_path)
    Dir.mkdir shared_downloads_path
  end

  cmd << "-v" << "#{shared_downloads_path}:/browser/Downloads"
  STDERR.puts "[INFO] Shared downloads in #{shared_downloads_path}"
end

if not profile_name
  profile_name = "adhoc-#{container_name}"
end

if profile_name
  path = "/srv/firefox/profiles/#{profile_name}"
  if not File.directory?(path)
    uid = Process.uid
    system "mkdir", "-p", path
  end

  cmd << "-v" << "#{path}:/browser/.mozilla"
  STDERR.puts "[INFO] Profile in #{path}"
end

volumes.each do |vol|
  cmd << "-v" << vol
end

cmd << image_name

if share_x11
  cmd.concat %w(firefox --new-instance --Private)
else
  cmd << "/browser/system"
end

puts "[INFO] #{cmd.join(" ")}"

output_log = "/tmp/.firefox-#{container_name}"

if fork
  STDERR.puts "Log to #{output_log}"
  exit
end

STDIN.reopen("/dev/null", "r")
STDOUT.reopen(output_log, "a")
STDERR.reopen(output_log, "a")

if share_x11

  exec(*cmd)

else

  cid = IO.popen(cmd).read.strip
  ip_address = IO.popen(["docker", "inspect",  "-f", "{{.NetworkSettings.IPAddress}}", cid]).read.strip
  puts "[INFO] Container #{cid} @ #{ip_address}"

  vnc_pid = fork do
    n = 0
    while n < 1000
      begin
        TCPSocket.new(ip_address, 5900).close
        break
      rescue Errno::ECONNREFUSED
        STDERR.print "\rWait VNC (#{n})\033[K"
        STDERR.flush
        sleep 0.1
        n += 1
        retry
      end
    end

    exec "vncviewer", "-encodings", "copyrect tight zrle hextile", "#{ip_address}:0"
  end

  system "docker", "wait", cid
  system "docker", "rm", cid
  Process.waitpid(vnc_pid)

end
